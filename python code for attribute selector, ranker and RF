{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10923340,"sourceType":"datasetVersion","datasetId":6791286},{"sourceId":10923348,"sourceType":"datasetVersion","datasetId":6791291},{"sourceId":10923354,"sourceType":"datasetVersion","datasetId":6791296},{"sourceId":11301114,"sourceType":"datasetVersion","datasetId":7067380},{"sourceId":11301391,"sourceType":"datasetVersion","datasetId":7067598},{"sourceId":11503208,"sourceType":"datasetVersion","datasetId":7212032}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-28T12:41:55.639042Z","iopub.execute_input":"2025-04-28T12:41:55.639355Z","iopub.status.idle":"2025-04-28T12:41:56.931580Z","shell.execute_reply.started":"2025-04-28T12:41:55.639325Z","shell.execute_reply":"2025-04-28T12:41:56.929867Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/acf-table-x/ACF_table.csv\n/kaggle/input/ped-data/data_with_ratios.csv\n/kaggle/input/pcom-jcom/combined_output2.csv\n/kaggle/input/new-dataset/classification_FD.csv\n/kaggle/input/acf-fd-table/FD_table.csv\n/kaggle/input/be-data/classification_FD_nonphysical.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"**Attribute selection**","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.feature_selection import SelectKBest, f_classif, mutual_info_classif\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.utils import shuffle\nfrom sklearn.ensemble import RandomForestClassifier\n\ndef load_data(filepath):\n    \"\"\"\n    Load dataset from a file and keep only columns that start with 'pcom', 'Jcom', or 'J2max'.\n    \n    :param filepath: Path to the dataset file (CSV).\n    :return: Tuple (X, y) where X are the filtered features and y is the target.\n    \"\"\"\n    data = pd.read_csv(filepath)\n    \n    # Keep only relevant columns\n    selected_columns = [col for col in data.columns if col.startswith((\"pcom\", \"Jcom\"))]\n    X = data[selected_columns]  # Select only matching columns\n    y = data.iloc[:, -1]        # Last column as target\n    \n    return X, y\n\nclass AttributeSelection:\n    def __init__(self, k=10, method=\"f_classif\", seed=1, num_folds=10):\n        \"\"\"\n        Initializes the attribute selection model.\n        \n        :param k: Number of top features to select.\n        :param method: Scoring method ('f_classif' or 'mutual_info').\n        :param seed: Random seed for reproducibility.\n        :param num_folds: Number of folds for cross-validation.\n        \"\"\"\n        self.k = k\n        self.method = method\n        self.seed = seed\n        self.num_folds = num_folds\n        self.selected_features = None\n        self.selector = None\n        self.feature_names = None\n\n    def fit(self, X, y):\n        \"\"\"\n        Performs feature selection on the dataset.\n        \n        :param X: Feature matrix (numpy array or pandas DataFrame).\n        :param y: Target labels.\n        \"\"\"\n        if self.method == \"f_classif\":\n            score_func = f_classif\n        elif self.method == \"mutual_info\":\n            score_func = mutual_info_classif\n        else:\n            raise ValueError(\"Invalid method. Choose 'f_classif' or 'mutual_info'.\")\n\n        self.selector = SelectKBest(score_func=score_func, k=self.k)\n        self.selector.fit(X, y)\n        self.selected_features = self.selector.get_support(indices=True)\n        self.feature_names = X.columns  # Store feature names\n\n    def transform(self, X):\n        \"\"\"\n        Transforms the dataset by selecting important features.\n        \n        :param X: Feature matrix.\n        :return: Transformed dataset with selected features.\n        \"\"\"\n        if self.selector is None:\n            raise ValueError(\"Feature selection has not been performed yet!\")\n        return self.selector.transform(X)\n\n    def cross_validate(self, X, y, model):\n        \"\"\"\n        Performs cross-validation to evaluate feature selection effectiveness.\n        \n        :param X: Feature matrix.\n        :param y: Target labels.\n        :param model: Machine learning model for evaluation.\n        :return: Mean accuracy score from cross-validation.\n        \"\"\"\n        X_selected = self.transform(X)\n        scores = cross_val_score(model, X_selected, y, cv=self.num_folds)\n        return np.mean(scores)\n\n    def get_selected_features(self):\n        \"\"\"\n        Returns the selected feature indices.\n        \n        :return: List of selected feature indices.\n        \"\"\"\n        if self.selected_features is None:\n            raise ValueError(\"Feature selection has not been performed yet!\")\n        return self.selected_features\n\n    def get_selected_feature_names(self):\n        \"\"\"\n        Get the names of selected features.\n        \n        :return: List of selected feature names.\n        \"\"\"\n        if self.selector is None or self.feature_names is None:\n            raise ValueError(\"Feature selection has not been performed yet!\")\n        return self.feature_names[self.selected_features].tolist()\n\n\n# Load dataset and filter only required columns\nX, y = load_data('/kaggle/input/pcom-jcom/combined_output2.csv')\n\n# Shuffle dataset\nX, y = shuffle(X, y, random_state=1)\n\n# Perform attribute selection\nselector = AttributeSelection(k=10, method=\"f_classif\")\nselector.fit(X, y)\n\n# Transform dataset\nX_selected = selector.transform(X)\n\n# Print selected feature names\nselected_features=selector.get_selected_feature_names()\nprint(\"Selected Feature Names:\", selected_features)\n\n# Evaluate with a classifier\nmodel = RandomForestClassifier(random_state=1)\nscore = selector.cross_validate(X, y, model)\nprint(f\"Cross-Validation Score: {score:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T14:00:07.869601Z","iopub.execute_input":"2025-04-28T14:00:07.870044Z","iopub.status.idle":"2025-04-28T14:00:09.603536Z","shell.execute_reply.started":"2025-04-28T14:00:07.870010Z","shell.execute_reply":"2025-04-28T14:00:09.602013Z"}},"outputs":[{"name":"stdout","text":"Selected Feature Names: ['pcom_pre1', 'pcom_pre2', 'pcom_pre3', 'pcom_pre4', 'pcom_pre5', 'pcom_post1', 'pcom_post2', 'pcom_post3', 'pcom_post4', 'pcom_post5']\nCross-Validation Score: 1.0000\n","output_type":"stream"}],"execution_count":66},{"cell_type":"code","source":"selected_features","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T13:08:30.066848Z","iopub.execute_input":"2025-04-28T13:08:30.067204Z","iopub.status.idle":"2025-04-28T13:08:30.074770Z","shell.execute_reply.started":"2025-04-28T13:08:30.067176Z","shell.execute_reply":"2025-04-28T13:08:30.073642Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"['pcom_pre1',\n 'pcom_pre2',\n 'pcom_pre3',\n 'pcom_pre4',\n 'pcom_pre5',\n 'pcom_post1',\n 'pcom_post2',\n 'pcom_post3',\n 'pcom_post4',\n 'pcom_post5']"},"metadata":{}}],"execution_count":22},{"cell_type":"markdown","source":"**Ranker**","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom scipy.stats import entropy\nfrom sklearn.base import BaseEstimator\nfrom sklearn.preprocessing import KBinsDiscretizer\nfrom sklearn.utils.validation import check_X_y\n\nclass InfoGainAttributeEval(BaseEstimator):\n    \"\"\"Information Gain attribute evaluator\"\"\"\n    \n    def __init__(self, missing_merge=True, binarize=False):\n        self.missing_merge = missing_merge\n        self.binarize = binarize\n        self.info_gains_ = None\n        self.valid_features_ = []\n        self.feature_names_ = []\n        \n    def fit(self, X, y):\n        \"\"\"Build the information gain evaluator\"\"\"\n        # Add feature names capture\n        if isinstance(X, pd.DataFrame):\n            self.feature_names_ = X.columns.tolist()\n        else:\n            self.feature_names_ = [f\"Feature_{i}\" for i in range(X.shape[1])]\n        X, y = check_X_y(X, y, dtype=None, force_all_finite='allow-nan')\n        self.valid_features_ = list(range(X.shape[1]))\n        self._preprocess_data(X, y)\n        return self\n        \n    def _preprocess_data(self, X, y):\n        \"\"\"Handle discretization/binarization and missing values\"\"\"\n        self.df = pd.DataFrame(X)\n        self.classes_ = pd.Series(y).unique()\n        \n        # Handle numeric features\n        for col in self.df.select_dtypes(include='number'):\n            if self.binarize:\n                self.df[col] = self._binarize(self.df[col])\n            else:\n                self.df[col] = self._discretize(self.df[col])\n                \n        # Store processed data and class labels\n        self.df['__class__'] = y\n        self._build_contingency_tables()\n        \n    def _discretize(self, feature):\n        \"\"\"Discretize numeric features using KBinsDiscretizer\"\"\"\n        discretizer = KBinsDiscretizer(n_bins=10, encode='ordinal', strategy='uniform')\n        return discretizer.fit_transform(feature.values.reshape(-1, 1)).ravel()\n    \n    def _binarize(self, feature):\n        \"\"\"Binarize numeric features using median threshold\"\"\"\n        return (feature > feature.median()).astype(int)\n    \n    def _build_contingency_tables(self):\n        \"\"\"Build contingency tables for each feature\"\"\"\n        self.contingency_tables = {}\n        \n        for col in self.df.columns[:-1]:  # Exclude class column\n            # Create contingency table\n            cont_table = pd.crosstab(\n                self.df[col], \n                self.df['__class__'],\n                rownames=[col],\n                colnames=['class'],\n                dropna=False\n            )\n            \n            # Handle missing values\n            if self.missing_merge:\n                cont_table = self._distribute_missing(cont_table)\n                \n            self.contingency_tables[col] = cont_table\n            \n    def _distribute_missing(self, cont_table):\n        \"\"\"Distribute missing values proportionally\"\"\"\n        # Calculate missing proportions\n        row_missing = cont_table.loc[np.nan] if np.nan in cont_table.index else pd.Series(0, index=cont_table.columns)\n        col_missing = cont_table.loc[:, np.nan] if np.nan in cont_table.columns else pd.Series(0, index=cont_table.index)\n        \n        # Remove missing entries\n        cont_table = cont_table.dropna(how='any', axis=0)\n        cont_table = cont_table.dropna(how='any', axis=1)\n        \n        # Calculate distribution proportions\n        row_totals = cont_table.sum(axis=1)\n        col_totals = cont_table.sum(axis=0)\n        total = cont_table.sum().sum()\n        \n        # Distribute row missing values\n        for idx, count in row_missing.items():\n            if count > 0 and total > 0:\n                proportions = row_totals / total\n                cont_table.loc[:, idx] += proportions * count\n                \n        # Distribute column missing values\n        for idx, count in col_missing.items():\n            if count > 0 and total > 0:\n                proportions = col_totals / total\n                cont_table.loc[idx, :] += proportions * count\n                \n        return cont_table.fillna(0)\n    \n    def _calculate_entropy(self, cont_table):\n        \"\"\"Calculate entropy for a contingency table\"\"\"\n        class_counts = cont_table.sum(axis=0)\n        total = class_counts.sum()\n        class_probs = class_counts / total\n        return entropy(class_probs, base=2)\n    \n    def _calculate_conditional_entropy(self, cont_table):\n        \"\"\"Calculate conditional entropy for a feature\"\"\"\n        feature_counts = cont_table.sum(axis=1)\n        total = feature_counts.sum()\n        entropies = []\n        \n        for _, row in cont_table.iterrows():\n            row_total = row.sum()\n            if row_total == 0:\n                continue\n            probs = row / row_total\n            ent = entropy(probs, base=2)\n            entropies.append((row_total / total) * ent)\n            \n        return sum(entropies)\n    \n    def evaluate_attribute(self, attribute_idx):\n        \"\"\"Evaluate information gain for a specific attribute\"\"\"\n        if self.info_gains_ is None:\n            self._compute_info_gains()\n            \n        if attribute_idx >= len(self.info_gains_):\n            raise ValueError(f\"Invalid attribute index: {attribute_idx}\")\n            \n        return self.info_gains_[attribute_idx]\n    \n    def _compute_info_gains(self):\n        \"\"\"Compute information gains for all attributes\"\"\"\n        self.info_gains_ = []\n        \n        # Calculate overall entropy\n        class_counts = self.df['__class__'].value_counts()\n        total = class_counts.sum()\n        class_probs = class_counts / total\n        H_class = entropy(class_probs, base=2)\n        \n        for col in self.df.columns[:-1]:\n            cont_table = self.contingency_tables[col]\n            H_conditional = self._calculate_conditional_entropy(cont_table)\n            self.info_gains_.append(H_class - H_conditional)\n    \n    def get_ranked_features(self):\n        \"\"\"Return features ranked by information gain\"\"\"\n        if self.info_gains_ is None:\n            self._compute_info_gains()\n            \n        # Create list of (index, gain) pairs\n        features = list(range(len(self.info_gains_)))\n        ranked = sorted(zip(features, self.info_gains_), \n                        key=lambda x: x[1], reverse=True)\n        return ranked\n\n    def print_ranking(self):\n        \"\"\"Print feature ranking with information gain scores\"\"\"\n        ranked = self.get_ranked_features()\n        print(\"\\nFeature Ranking based on Information Gain:\")\n        print(\"Rank\\tFeature\\t\\tInformation Gain\")\n        print(\"-------------------------------------------\")\n        for i, (feat_idx, gain) in enumerate(ranked):\n            # Use actual feature names\n            feat_name = self.feature_names_[feat_idx]\n            print(f\"{i+1}\\t{feat_name}\\t\\t{gain:.4f}\")\n\n\n    \n    \n# Initialize and fit evaluator\nig = InfoGainAttributeEval()\nX=X[selected_features]\nig.fit(X, y)\n    \nranked = ig.print_ranking()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T14:00:16.180568Z","iopub.execute_input":"2025-04-28T14:00:16.180956Z","iopub.status.idle":"2025-04-28T14:00:16.349203Z","shell.execute_reply.started":"2025-04-28T14:00:16.180923Z","shell.execute_reply":"2025-04-28T14:00:16.347841Z"}},"outputs":[{"name":"stdout","text":"\nFeature Ranking based on Information Gain:\nRank\tFeature\t\tInformation Gain\n-------------------------------------------\n1\tpcom_pre1\t\t1.0000\n2\tpcom_pre2\t\t1.0000\n3\tpcom_pre3\t\t1.0000\n4\tpcom_pre4\t\t1.0000\n5\tpcom_pre5\t\t1.0000\n6\tpcom_post1\t\t1.0000\n7\tpcom_post2\t\t1.0000\n8\tpcom_post3\t\t1.0000\n9\tpcom_post4\t\t1.0000\n10\tpcom_post5\t\t1.0000\n","output_type":"stream"}],"execution_count":67},{"cell_type":"markdown","source":"**Random Forest**","metadata":{}},{"cell_type":"code","source":"#remove the first 10 features\nnon_pcom_features = [feature for feature in selected_features \n                    if not str(feature).lower().startswith(\"pcom\")]\nprint(non_pcom_features)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-12T07:31:35.420166Z","iopub.execute_input":"2025-03-12T07:31:35.420585Z","iopub.status.idle":"2025-03-12T07:31:35.426022Z","shell.execute_reply.started":"2025-03-12T07:31:35.420550Z","shell.execute_reply":"2025-03-12T07:31:35.424877Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_predict, StratifiedKFold\nfrom sklearn.metrics import (accuracy_score, confusion_matrix, classification_report, mean_absolute_error,\n                             mean_squared_error, cohen_kappa_score, roc_auc_score, precision_recall_curve, matthews_corrcoef)\n\nclass RandomForestKaggle:\n    def __init__(self, num_trees=100, max_depth=5, random_seed=42, num_execution_slots=-1):\n        self.num_trees = num_trees\n        self.max_depth = max_depth\n        self.random_seed = random_seed\n        self.num_execution_slots = num_execution_slots\n        self.classifier = RandomForestClassifier(\n            n_estimators=self.num_trees,\n            max_depth=self.max_depth,\n            random_state=self.random_seed,\n            n_jobs=self.num_execution_slots\n        )\n\n    def cross_validate(self, X, y, num_folds=5):\n        skf = StratifiedKFold(n_splits=num_folds, shuffle=True, random_state=self.random_seed)\n        y_pred = cross_val_predict(self.classifier, X, y, cv=skf)\n        return y_pred\n\n    def get_feature_importance(self, feature_names):\n        return dict(zip(feature_names, self.classifier.feature_importances_))\n\n# Load dataset\ndf = pd.read_csv(\"/kaggle/input/pcom-jcom/combined_output2.csv\")\n\n\n#selected_features = ['pcom_post4', 'pcom_post5', 'pcom_post3', 'pcom_post1', 'pcom_pre3', 'pcom_pre2', 'pcom_pre4', 'pcom_pre5', 'pcom_pre1', 'pcom_post2', 'J2max_pre5', 'J2max_post5']\nclass_column = 'resp'\n\ndf[class_column] = df[class_column].map({'performer': 1, 'nonperformer': 0}).fillna(0).astype(int)\nX = df[selected_features].values\ny = df[class_column].values\n\n# Initialize classifier\nrf = RandomForestKaggle()\nnum_folds = 52\n\n# Perform cross-validation\ny_pred = rf.cross_validate(X, y, num_folds)\naccuracy = accuracy_score(y, y_pred)\nprint(f\"Cross-Validation Accuracy: {accuracy * 100:.2f}%\")\n\n# Confusion matrix\nconf_matrix = confusion_matrix(y, y_pred, labels=[0, 1])\nconf_matrix_df = pd.DataFrame(conf_matrix, index=['Nonperformer', 'Performer'], columns=['Nonperformer', 'Performer'])\nprint(\"Confusion Matrix:\")\nprint(conf_matrix_df)\n#print(\"Confusion Matrix:\")\n#print(conf_matrix)\n\n# Classification report\nreport = classification_report(y, y_pred, target_names=['Nonperformer', 'Performer'])\nprint(\"Classification Report:\")\nprint(report)\n\n# Additional metrics\nkappa = cohen_kappa_score(y, y_pred)\nmae = mean_absolute_error(y, y_pred)\nrmse = mean_squared_error(y, y_pred, squared=False)\nrelative_absolute_error = mae / np.mean(np.abs(y))\nroot_relative_squared_error = rmse / np.sqrt(np.mean(y**2))\n\nprint(f\"Correctly Classified Instances: {accuracy * len(y)} ({accuracy * 100:.2f}%)\")\nprint(f\"Incorrectly Classified Instances: {(1 - accuracy) * len(y)} ({(1 - accuracy) * 100:.2f}%)\")\nprint(f\"Kappa Statistic: {kappa:.4f}\")\nprint(f\"Mean Absolute Error: {mae:.4f}\")\nprint(f\"Root Mean Squared Error: {rmse:.4f}\")\nprint(f\"Relative Absolute Error: {relative_absolute_error:.4f}\")\nprint(f\"Root Relative Squared Error: {root_relative_squared_error:.4f}\")\nprint(f\"Total Number of Instances: {len(y)}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T19:45:22.578897Z","iopub.execute_input":"2025-04-06T19:45:22.579302Z","iopub.status.idle":"2025-04-06T19:45:38.200135Z","shell.execute_reply.started":"2025-04-06T19:45:22.579268Z","shell.execute_reply":"2025-04-06T19:45:38.198921Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_predict, StratifiedKFold\nfrom sklearn.metrics import (accuracy_score, confusion_matrix, classification_report, mean_absolute_error,\n                             mean_squared_error, cohen_kappa_score)\n\n# Load dataset\ndf = pd.read_csv(\"/kaggle/input/pcom-jcom/combined_output2.csv\")\nclass_column = 'resp'\n\ndf[class_column] = df[class_column].map({'performer': 1, 'nonperformer': 0}).astype(int)\nX = df[selected_features].values\ny = df[class_column].values\n\n# Pre-tuned Random Forest\nfull_rf = RandomForestClassifier(\n    n_estimators=200,\n    max_depth=5,\n    min_samples_split=2,\n    min_samples_leaf=8,\n    max_features='sqrt',\n    random_state=42,\n    n_jobs=-1\n)\nfull_rf.fit(X, y)\n\ncv = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n\nall_true = []\nall_pred = []\n\nfor train_idx, test_idx in cv.split(X, y):\n    X_train, X_test = X[train_idx], X[test_idx]\n    y_train, y_test = y[train_idx], y[test_idx]\n    \n    # Now predict using full trained model\n    y_pred = full_rf.predict(X_test)\n    \n    all_true.extend(y_test)\n    all_pred.extend(y_pred)\n\n# Evaluation\naccuracy = accuracy_score(all_true, all_pred)\nprint(f\"Cross-Validation Accuracy after full training: {accuracy * 100:.2f}%\")\n\nconf_matrix = confusion_matrix(all_true, all_pred, labels=[0, 1])\nconf_matrix_df = pd.DataFrame(conf_matrix, index=['Nonperformer', 'Performer'], columns=['Nonperformer', 'Performer'])\nprint(\"Cross-Validation Confusion Matrix:\")\nprint(conf_matrix_df)\n\nreport = classification_report(all_true, all_pred, target_names=['Nonperformer', 'Performer'])\nprint(\"Cross-Validation Classification Report:\")\nprint(report)\nkappa = cohen_kappa_score(all_true, all_pred)\nmae = mean_absolute_error(all_true, all_pred)\nrmse = mean_squared_error(all_true, all_pred, squared=False)\n\nprint(f\"Kappa Statistic: {kappa:.4f}\")\nprint(f\"Mean Absolute Error: {mae:.4f}\")\nprint(f\"Root Mean Squared Error: {rmse:.4f}\")\nprint(f\"Total Number of Instances: {len(y)}\")\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-28T14:00:53.497068Z","iopub.execute_input":"2025-04-28T14:00:53.497424Z","iopub.status.idle":"2025-04-28T14:00:54.566321Z","shell.execute_reply.started":"2025-04-28T14:00:53.497396Z","shell.execute_reply":"2025-04-28T14:00:54.565233Z"}},"outputs":[{"name":"stdout","text":"Cross-Validation Accuracy after full training: 100.00%\nCross-Validation Confusion Matrix:\n              Nonperformer  Performer\nNonperformer            28          0\nPerformer                0         28\nCross-Validation Classification Report:\n              precision    recall  f1-score   support\n\nNonperformer       1.00      1.00      1.00        28\n   Performer       1.00      1.00      1.00        28\n\n    accuracy                           1.00        56\n   macro avg       1.00      1.00      1.00        56\nweighted avg       1.00      1.00      1.00        56\n\nKappa Statistic: 1.0000\nMean Absolute Error: 0.0000\nRoot Mean Squared Error: 0.0000\nTotal Number of Instances: 56\n","output_type":"stream"}],"execution_count":69},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\ndef calculate_ratios(input_file, output_file):\n    try:\n        # Read the stacked CSV file\n        df = pd.read_csv(input_file)\n        \n        # Add ratio columns for pcom values\n        # pcom_ratio1 = pcom_pre1/pcom_pre1\n        df['pcom_ratio1'] = df['pcom_pre1'] / df['pcom_pre1']  # This will be 1.0 for all non-NaN values\n        \n        # pcom_ratio2 through pcom_ratio5\n        for i in range(2, 6):\n            df[f'pcom_ratio{i}'] = df[f'pcom_pre{i}'] / df['pcom_pre1']\n        \n        # pcom_ratio6 through pcom_ratio10\n        for i in range(1, 6):\n            ratio_index = i + 5\n            df[f'pcom_ratio{ratio_index}'] = df[f'pcom_post{i}'] / df['pcom_pre1']\n        \n        # Add ratio columns for Jcom values - same pattern as pcom\n        # Jcom_ratio1 = Jcom_pre1/Jcom_pre1\n        df['Jcom_ratio1'] = df['Jcom_pre1'] / df['Jcom_pre1']  # This will be 1.0 for all non-NaN values\n        \n        # Jcom_ratio2 through Jcom_ratio5\n        for i in range(2, 6):\n            df[f'Jcom_ratio{i}'] = df[f'Jcom_pre{i}'] / df['Jcom_pre1']\n        \n        # Jcom_ratio6 through Jcom_ratio10\n        for i in range(1, 6):\n            ratio_index = i + 5\n            df[f'Jcom_ratio{ratio_index}'] = df[f'Jcom_post{i}'] / df['Jcom_pre1']\n        \n        # Save to a new CSV file\n        df.to_csv(output_file, index=False)\n        print(f\"Successfully added ratio columns and saved to {output_file}\")\n        return True\n    \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n\n\ninput_file = \"stacked_hemispheres_data.csv\"  # Output from previous script\noutput_file = \"data_with_ratios.csv\"  \ncalculate_ratios(input_file, output_file)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T19:28:11.739164Z","iopub.execute_input":"2025-04-06T19:28:11.739553Z","iopub.status.idle":"2025-04-06T19:28:11.773199Z","shell.execute_reply.started":"2025-04-06T19:28:11.739519Z","shell.execute_reply":"2025-04-06T19:28:11.772099Z"}},"outputs":[],"execution_count":null}]}